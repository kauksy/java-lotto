[2주차] 로또 - TDD
step2. 로또(자동)
1. 기능 요구사항
 1) [입력] 로또 구입 금액을 입력하면 구입 금액에 해당하는 로또를 발급해야 한다.
 → 구입금액을 입력받기
 2) [출력] 로또 1장의 가격은 1000원이다.
 → 구매금액/1000 으로 몇개 구매했는지 출력하기
 3) [출력] 구매한 로또번호 출력하기 (6자리)
 → 로또 자동 생성은 Collections.shuffle() 메소드 활용한다
 4) [입력] 당첨번호 입력하기 (6자리)
 → 당첨번호 입력받기
 5) [출력] 당첨 통계내기:  3개 일치 (5000원).... 으로 일치한 개수 대로 통개내고 수익률내기
 → ArrayList의 contains() 메소드를 활용하면 어떤 값이 존재하는지 유무를 판단


=============기능 요구사항 간단히 요약하면===============
    1. 입력받는다. ( View )
    - 로또 구입 금액/ 당첨번호
    2. 출력한다. ( View )
    - 몇개 구매했는지(View),  구매한 로또번호 (Model)
    3. 당첨 통계내기  ( Model )
=====================================================

2. 프로그래밍 요구사항
 1) 모든 기능을 TDD로 구현해 단위 테스트가 존재해야 한다. 단, UI(System.out, System.in) 로직은 제외
 - 핵심 로직을 구현하는 코드와 UI를 담당하는 로직을 구분
 - UI 로직을 InputView, ResultView와 같은 클래스를 추가해 분리
 2) 인덴트, 들여쓰기, depth를 2를 넘지 않도록 구현한다. 1까지만 허용
 3) 함수(또는 메소드)의 길이가 15라인을 넘어가지 않도록 구현한다.
 4) 모든 로직에 단위 테스트를 구현
 5) 자바 코드 컨벤션을 지키면서 프로그래밍
 +) else를 사용하지 마라.

3. 기능 요구사항 분리 및 힌트
 **분리**
 - View: 입력/출력
 - Model(=domain): 로또 번호, 로또 당첨번호 검사, 몇 장의 로또를 샀는지 출력 / 유효성검사
 - Controller(=main): Model과 View를 알맞게 조립한다.

 **TDD싸이클**
 - 실패하는 테스트를 구현한다.
 - 테스트가 성공하도록 프로덕션 코드를 구현한다.
 - 프로덕션 코드와 테스트 코드를 리팩토링한다.

